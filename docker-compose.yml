version: "3.8"

services:

    # PHP service
    php:
        container_name: app
        build:
            context: ./docker/php
            args:
                PHP_VERSION: ${PHP_VERSION}
                TIMEZONE: ${TIMEZONE}
                EMAIL_ADDRESS: ${EMAIL_ADDRESS}
                USER_NAME: ${USER_NAME}
        volumes:
            - ./app:/var/www/symfony
        depends_on:
            - postgres
            - redis
        networks:
            - network
        restart: unless-stopped

    # Nginx service
    nginx:
        container_name: nginx
        build:
            context: ./docker/nginx
            args:
                NGINX_VERSION: ${NGINX_VERSION}
                SERVER_NAME: ${SERVER_NAME}
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./app:/var/www/symfony
            - ./logs/nginx:/var/log/nginx
            - ./data/certbot/conf:/etc/letsencrypt
            - ./data/certbot/www:/var/www/certbot
        depends_on:
            - php
        networks:
            - network
        restart: unless-stopped
        command: >
            /bin/sh -c "while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\""

    # Certbot service
    certbot:
        container_name: certbot
        image: certbot/certbot
        volumes:
        - ./data/certbot/conf:/etc/letsencrypt
        - ./data/certbot/www:/var/www/certbot
        depends_on:
            - nginx
        networks:
            - network
        restart: unless-stopped
        entrypoint: >
            /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;"

    # Postgres service
    postgres:
        container_name: sql
        image: postgres:${POSTGRES_VERSION}-alpine
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        ports:
            - "5432:5432"
        volumes:
            - ./data/postgres/db_data:/var/lib/postgresql/data
        networks:
            - network
        restart: unless-stopped

    redis:
        container_name: redis
        image: redis:${REDIS_VERSION:-6}-alpine
        ports:
            - "6379:6379"
        volumes:
            - ./data/redis:/data
        networks:
            - network
        restart: unless-stopped
        command:
            - "redis-server"
            - "--loglevel ${REDIS_LOGLEVEL:-warning}"
            - "--databases 2"
            - "--save 900 1"
            - "--save 300 10"
            - "--save 60 10000"
            - "--maxmemory ${REDIS_MAXMEM:-50mb}"
            - "--maxmemory-policy ${REDIS_POLICY:-noeviction}"
            - "--requirepass ${REDIS_PASS}"

# Volumes
volumes:
    app:
    data:
        driver: local
    logs:

# Docker Networks
networks:
    network:
        driver: bridge